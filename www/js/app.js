// Generated by CoffeeScript 1.4.0
(function() {
  var Entry, exports;

  window.r_id = "";

  window.create_new_entry = function() {
    var content, d, date, entry, hashtags, timeago;
    console.log("create new entry called");
    if ((window.r_id != null) && window.r_id !== "") {
      window.save_entry();
      return true;
    }
    content = $("#writearea").val();
    if (content !== "") {
      hashtags = twttr.txt.extractHashtags(content);
      entry = Entry.create({
        text: content,
        create_time: (new Date()).toString(),
        tags: hashtags
      });
      $("#writearea").val("");
      d = new Date(entry.create_time);
      timeago = jQuery.timeago(d);
      date = (d.getUTCMonth() + 1) + "/" + d.getUTCDate() + "/" + d.getUTCFullYear();
      window.store.loadData([
        {
          text: entry.text,
          create_time: timeago,
          tags: entry.tags.toString(),
          date: date,
          id: entry.id,
          seconds: d / 1000
        }
      ], true);
      return ios_notify.notify({
        title: "Entry Added",
        message: content
      });
    }
  };

  window.get_entry_from_spine = function() {
    var all_entries, d, date, entry, timeago, _i, _len, _ref;
    all_entries = [];
    _ref = Entry.all();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      entry = _ref[_i];
      d = new Date(entry.create_time);
      timeago = jQuery.timeago(d);
      date = (d.getUTCMonth() + 1) + "/" + d.getUTCDate() + "/" + d.getUTCFullYear();
      all_entries.push({
        text: entry.text,
        create_time: timeago,
        tags: entry.tags.toString(),
        date: date,
        id: entry.id,
        seconds: d / 1000,
        time: entry.time
      });
    }
    return all_entries;
  };

  window.delete_entry = function() {
    var e;
    e = Entry.find(window.r_id);
    e.destroy();
    ios_notify.notify({
      title: "Deleted",
      message: "Entry Deleted"
    });
    window.store.loadData(get_entry_from_spine(), false);
    window.list.refresh();
    window.carousel.setActiveItem(1, 'flip');
    return window.r_id = "";
  };

  window.save_entry = function() {
    var e, value;
    e = Entry.find(window.r_id);
    value = $("#writearea").val();
    e.text = value;
    e.save();
    window.store.loadData(get_entry_from_spine(), false);
    window.list.refresh();
    window.carousel.setActiveItem(1, 'flip');
    ios_notify.notify({
      title: "Saved",
      message: "Entry Saved"
    });
    $("#writearea").val("");
    return window.r_id = "";
  };

  Nimbus.Auth.setup("Dropbox", "q5yx30gr8mcvq4f", "qy64qphr70lwui5", "diary_app");

  Entry = Nimbus.Model.setup("Entry", ["text", "create_time", "tags"]);

  /*
  Entry.ordersort = (a, b) ->
    x = new Date(a.create_time)
    y = new Date(b.create_time)
    (if (x > y) then -1 else 1)
  */


  window.auth = function() {
    ios_notify.notify({
      title: "Authentication in progress",
      message: "Wait for the browser window to open up and authenticate."
    });
    return Nimbus.Auth.authorize();
  };

  window.validate = function() {
    return Nimbus.Auth.initialize();
  };

  Nimbus.Auth.authorized_callback = function() {
    ios_notify.notify({
      title: "Validation",
      message: "Validation is done! Now your data is stored in Dropbox."
    });
    return window.sync_entry();
  };

  window.sync_entry = function() {
    if (Nimbus.Auth.authorized()) {
      return Entry.sync_all(function() {
        window.store.loadData(get_entry_from_spine(), false);
        window.list.refresh();
        return ios_notify.notify({
          title: "Synced",
          message: "Data synced!"
        });
      });
    } else {
      return ios_notify.notify({
        title: "Not Authorized",
        message: "You need to authorize first!"
      });
    }
  };

  window.auto_sync = function() {
    if (Nimbus.Auth.authorized() && (window.navigator.onLine || navigator.network.connection.type === Connection.WIFI || navigator.network.connection.type === Connection.CELL_3G)) {
      return Entry.sync_all(function() {
        if (get_entry_from_spine().length > 0) {
          if (window.last_data !== localStorage["Entry"]) {
            console.log("auto-syncing triggered");
            window.store.loadData(get_entry_from_spine(), false);
            window.list.refresh();
            if ($("#filtertext").val() !== "") {
              window.filter_store($("#filtertext").val().replace("#", ""));
            }
            window.last_data = localStorage["Entry"];
          } else {
            console.log("nothing changed");
          }
        }
        return setTimeout("window.auto_sync()", 5000);
      });
    } else {
      console.log("auto-syncing failed due to no connection or no authentication");
      return setTimeout("window.auto_sync()", 5000);
    }
  };

  window.filter_store = function(word) {
    window.store.filterBy(function(record) {
      var tags;
      tags = record.get('tags');
      if ((tags != null) && tags !== "") {
        return tags.indexOf(word) !== -1;
      } else {
        return false;
      }
    });
    return window.store.sort("seconds", "DESC");
  };

  exports = this;

  exports.Entry = Entry;

}).call(this);
